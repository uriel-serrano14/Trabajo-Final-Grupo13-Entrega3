/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Data.EquipoData;
import Data.EquipoMiembrosData;
import Data.MiembroData;
import Data.ProyectoData;
import Data.TareaData;
import Entidad.Equipo;
import Entidad.Miembro;
import Entidad.Proyecto;
import Entidad.Tarea;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author EQUIPO
 */
public class ViewTareas extends javax.swing.JInternalFrame {
    private EquipoMiembrosData emd = new EquipoMiembrosData();
    private ProyectoData pd = new ProyectoData();
    private MiembroData md = new MiembroData();
    private TareaData td = new TareaData();
    private EquipoData ed = new EquipoData();
    private DefaultTableModel modelo=new DefaultTableModel();
    
    /**
     * Creates new form ViewTareas
     */
    
    public ViewTareas() {
        initComponents();
        cargaProyectos();
        cargaMiembros();
        armarCabecera();
        borrarFilas();
    }

    private void armarCabecera() {
        ArrayList titulos=new ArrayList();
        titulos.add("ID");
        titulos.add("Nombre");
        titulos.add("Fecha de inicio");
        titulos.add("Fecha de cierre");
        titulos.add("Estado");
        for(Object titulo:titulos){
            modelo.addColumn(titulo);
        }
        jtTareas.setModel(modelo);
    }
    private void llenarTabla(){
            Proyecto proyecto = (Proyecto) jcProyectos.getSelectedItem();
            List<Tarea> tareas = td.buscarTareasPorProyecto(proyecto.getIdProyecto());
            
            for (Tarea t : tareas) {
                int estado = t.getEstado();
                switch (estado) {
                    case 1:
                        modelo.addRow(new Object[]{t.getIdTarea(),t.getNombr(),t.getFechaCreacion(),t.getFechaCierre(),"Pendiente"});
                        break;
                    case 2:
                        modelo.addRow(new Object[]{t.getIdTarea(),t.getNombr(),t.getFechaCreacion(),t.getFechaCierre(),"Progreso"});
                        break;
                    case 3:
                        modelo.addRow(new Object[]{t.getIdTarea(),t.getNombr(),t.getFechaCreacion(),t.getFechaCierre(),"Finalizada"});
                        break;           
                }
                
            }
    }
    
    private void cargaMiembros(){
        jcMiembro.removeAllItems();
        Proyecto proyecto = (Proyecto) jcProyectos.getSelectedItem();
        List<Miembro> miembros = emd.buscarMiembrosPorProyecto(proyecto.getIdProyecto());
        for (Miembro miembro : miembros) {
            jcMiembro.addItem(miembro);
        }
    }
    
    private void cargaProyectos() {
        List<Proyecto> proyectos = pd.traerTodos();
        for (Proyecto proyecto : proyectos) {
            jcProyectos.addItem(proyecto);
        }
    }
    
    private void borrarFilas(){
        int filas=modelo.getRowCount()-1;
        for(int i=filas;i>=0;i--){

            modelo.removeRow(i);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jcProyectos = new javax.swing.JComboBox<>();
        jChBFiltrar = new javax.swing.JCheckBox();
        jcMiembro = new javax.swing.JComboBox<>();
        jcEstado = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTareas = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Proyecto");

        jcProyectos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcProyectosActionPerformed(evt);
            }
        });

        jChBFiltrar.setText("Filtrar");
        jChBFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jChBFiltrarActionPerformed(evt);
            }
        });

        jcMiembro.setEnabled(false);
        jcMiembro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcMiembroActionPerformed(evt);
            }
        });

        jcEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pendiente", "Progreso", "Finalizada" }));
        jcEstado.setEnabled(false);
        jcEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcEstadoActionPerformed(evt);
            }
        });

        jLabel2.setText("Miembro");

        jLabel3.setText("Estado");

        jLabel4.setText("Tareas");

        jtTareas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Fecha de inicio", "Fecha de cierre", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtTareas);

        jButton1.setText("Salir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(324, 324, 324)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton1)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jcProyectos, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(69, 69, 69)
                                    .addComponent(jChBFiltrar)
                                    .addGap(28, 28, 28)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 133, Short.MAX_VALUE)
                                            .addComponent(jLabel2)
                                            .addGap(57, 57, 57))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jcEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jcMiembro, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 734, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcProyectos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jChBFiltrar)
                    .addComponent(jcEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcMiembro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jcProyectosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcProyectosActionPerformed
       //PROYECTOOOOOOO
       cargaMiembros();
       borrarFilas();
       llenarTabla();
       
    }//GEN-LAST:event_jcProyectosActionPerformed

    private void jChBFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChBFiltrarActionPerformed
        boolean op = jChBFiltrar.isSelected();
        if(op){
            jcMiembro.setEnabled(true);
            jcEstado.setEnabled(true);
        }else{
            jcMiembro.setEnabled(false);
            jcEstado.setEnabled(false);
        }
    }//GEN-LAST:event_jChBFiltrarActionPerformed

    private void jcEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcEstadoActionPerformed
        //Filtrar por Estado
        borrarFilas();
        llenarTablaTareasPorEstado();
    }//GEN-LAST:event_jcEstadoActionPerformed

    private void jcMiembroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcMiembroActionPerformed
        //Filtrar Por Miembro
        borrarFilas();
        llenarTablaTareasPorMiembro();
    }//GEN-LAST:event_jcMiembroActionPerformed

    private void llenarTablaTareasPorEstado(){
            Proyecto proyecto = (Proyecto) jcProyectos.getSelectedItem();
            List<Tarea> tareas = td.buscarTareasPorProyecto(proyecto.getIdProyecto());
            
            String estadoTabla = (String) jcEstado.getSelectedItem();
            
            
            
            for (Tarea t : tareas) {
                int estado = t.getEstado();
                switch (estadoTabla) {
                    case "Pendiente":
                        if(estado == 1){
                            modelo.addRow(new Object[]{t.getIdTarea(),t.getNombr(),t.getFechaCreacion(),t.getFechaCierre(),"Pendiente"});
                        }
                        break;
                    case "Progreso":
                        if(estado == 2){
                            modelo.addRow(new Object[]{t.getIdTarea(),t.getNombr(),t.getFechaCreacion(),t.getFechaCierre(),"Progreso"});
                        }
                        break;
                    case "Finalizada":
                        if(estado == 3){
                            modelo.addRow(new Object[]{t.getIdTarea(),t.getNombr(),t.getFechaCreacion(),t.getFechaCierre(),"Finalizada"});
                        }
                        break;  
            }
        }
    }
    
    private void llenarTablaTareasPorMiembro(){
            Proyecto proyecto = (Proyecto) jcProyectos.getSelectedItem();
            Miembro m = (Miembro) jcMiembro.getSelectedItem();
            if (m != null) { // Verificar si se ha seleccionado un miembro válido
                List<Tarea> tareas = emd.buscarTareasPorMiembro(m.getIdMiembro());

                for (Tarea t : tareas) {
                    int estado = t.getEstado();
                    switch (estado) {
                        case 1:
                            modelo.addRow(new Object[]{t.getIdTarea(),t.getNombr(),t.getFechaCreacion(),t.getFechaCierre(),"Pendiente"});
                            break;
                        case 2:
                            modelo.addRow(new Object[]{t.getIdTarea(),t.getNombr(),t.getFechaCreacion(),t.getFechaCierre(),"Progreso"});
                            break;
                        case 3:
                            modelo.addRow(new Object[]{t.getIdTarea(),t.getNombr(),t.getFechaCreacion(),t.getFechaCierre(),"Finalizada"});
                            break;           
                }              
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jChBFiltrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcEstado;
    private javax.swing.JComboBox<Miembro> jcMiembro;
    private javax.swing.JComboBox<Proyecto> jcProyectos;
    private javax.swing.JTable jtTareas;
    // End of variables declaration//GEN-END:variables
}
